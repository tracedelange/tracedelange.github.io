<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-09-05T17:03:49-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">DeLange Development</title><subtitle>Dev Blog</subtitle><author><name>Trace DeLange</name></author><entry><title type="html">Using Sinatra to Display Data Scraped From Twitter</title><link href="http://localhost:4000/2021-09-05-data-scraping-and-displaying-with-sinatra" rel="alternate" type="text/html" title="Using Sinatra to Display Data Scraped From Twitter" /><published>2021-09-05T12:00:00-05:00</published><updated>2021-09-05T12:00:00-05:00</updated><id>http://localhost:4000/data-scraping-and-displaying-with-sinatra</id><content type="html" xml:base="http://localhost:4000/2021-09-05-data-scraping-and-displaying-with-sinatra">&lt;h1 id=&quot;welcome-back&quot;&gt;Welcome Back!&lt;/h1&gt;

&lt;p&gt;In this blog post, I’m going to lay out how I managed to build a recent project of mine where I used a Raspberry Pi to scrape data from Twitter, save it in a Postgres database, access it though a Sinatra API, and display it on a frontend React app.&lt;/p&gt;

&lt;p&gt;There are a couple of reasons I wanted to dive into this project. For starters, I’ve always been interested in building datasets, particularly by scraping information from the internet. I’m also a little interested in market trends with tradable stocks. I’m no market analyst by any means but I do believe that investing is a great way to make your money work for you and can be a great source of extra income if done wisely.&lt;/p&gt;

&lt;p&gt;There is a sub-community of users on Twitter that all talk about stocks which they believe will increase or decrease in value. Some of these accounts have around 100 followers or so which is a relatively small amount of outreach. Other accounts however have huge follower bases, upwards of 500,000 followers. The premise of the project is simple: Track the frequency of stock mentions by these high-profile accounts and determine which stock symbols (or “tickers”) are being talked about the most. Once that data is collected, what does it look like super-imposed over real market price data? Is there a correlation between stock value increasing or decreasing proportionally to how much the ticker is being talked about? Let’s find out!&lt;/p&gt;

&lt;h3 id=&quot;scraping-tweets-from-twitter&quot;&gt;Scraping Tweets From Twitter&lt;/h3&gt;

&lt;p&gt;It’s not terribly difficult to scrape tweets from Twitter. All you need to do is register an account with their development page and answer a few questions about your project to get access to API key credentials. It might take a day or two for them to review your application but it’s totally free and the rate-limits for accessing the API are very generous.&lt;/p&gt;

&lt;p&gt;There are a ton of frameworks out there for accessing the twitter API depending on what language you prefer to use. In my case, I decided to write the scraper in Python, utilizing the &lt;a href=&quot;https://www.tweepy.org/&quot;&gt;Tweepy&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;The first step was to generate a list of users to scrape tweets from and determine the number of followers each account has. Thankfully each of these accounts is brutally honest about their advice and almost each one contains some variation of “I am not a financial advisor”, “Do your own research”, “Not liable for any losses” or “All opinions are my own” in their bio, presumably to absolve them of any fault if their advice doesn’t quite pan how they hope it will. Given this observation, it was a simple matter of writing a script that would look at a user, iterate through each of the users they follow, check their account bio for any mention of the above pattern, and append their user ID to a CSV of ID’s along with their current follower count. This process can be repeated for each new user on the list and in a short time I had over 500 very active users constantly tweeting out market predictions and forecasts to their followers.&lt;/p&gt;

&lt;p&gt;The next step was to simply iterate over each user ID in the list and download as many tweets as the API would allow. After this is done, each tweet is parsed to determine if a ticker symbol is present in the string, usually identifiable by the “$” symbol followed by a short string of alpha characters. Each time a symbol was mentioned on a particular date, it would be appended to a nested dictionary containing the number of times a ticker was mentioned on any date. Once all the tweets have been filtered, the information is pushed to a Heroku-hosted PostgreSQL library and the process is restarted with a new user. This process can take a very long time, and I thought it would be a good use of my Raspberry  Pi to do the heavy lifting as far as parsing thousands of strings. I included a small script that would send an email to my main email address each time the parsing process finished with statistics on the length of time the script took to run as well as the number of tweets downloaded. Since I have a 128gb micro-SD card for my Pi, I don’t have to worry about space requirements on a cloud hosting service.&lt;/p&gt;

&lt;h3 id=&quot;working-with-postgres&quot;&gt;Working with Postgres&lt;/h3&gt;

&lt;p&gt;Heroku and Postgres are a match made in heaven. It’s a simple process to access Heroku based PostgreSQL servers and insert data. My first iteration of the project was poorly designed. My idea was to create a table for each individual ticker. Each row of a table would contain a Date as the primary key along with the number of mentions that the ticker had received on that given day. This resulted in my database containing a little under 1,000 tables.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/money-talks/bad-tables.png&quot; alt=&quot;Profile Page&quot; style=&quot;width:10vw;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yeesh. That’s not awesome. Not only was that a clunky way to design the database, but it was going to make defining models based on dynamic table names far more difficult down the road when working with active record and Sinatra. One of the main requirements for this project was a many-to-one relationship between data models. I had to reorder how the data was structured to make it compatible with Sinatra. I took a trip over to &lt;a href=&quot;https://www.dbdesigner.net/&quot;&gt;DB Designer&lt;/a&gt; and laid out what I needed my data to look like:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;./assets/money-talks/db-layout.png&quot; alt=&quot;Profile Page&quot; style=&quot;width:130vw;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;My plan was to use two tables to represent the parsed data, a table for tickers which contains a string of the ticker symbol and a unique ID that could be referenced by a second table called “date_mentions”. Each row in the Date Mention table would contain a date, a ticker_id, the number of mentions the ticker had received that day, and an “estimated_outreach” for that ticker on that day. “Estimated Outreach” is simply the aggregate sum of each mention multiplied by the number of followers the user who mentioned the symbol has. If a user with 10 followers tweeted a symbol 5 times, the estimated outreach would be 50. A user with 10,000,000 followers tweeting about a particular stock has a lot more weight behind it than a user with a fraction of those followers.&lt;/p&gt;

&lt;p&gt;After a little refactoring, we arrived here. A big improvement from 1000 tables!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/money-talks/better-tables.png&quot; alt=&quot;Profile Page&quot; style=&quot;width:20vw;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;sinatra-and-active-record&quot;&gt;Sinatra And Active Record&lt;/h3&gt;

&lt;p&gt;I’m not going to pretend to be a die-hard Ruby enthusiast. If I have my choice, I’d use Python or JavaScript before getting my hands dirty in Ruby, but credit where credit is due, Active Record and Sinatra are very useful Ruby libraries. All I had to do to get a working model of my data was define two classes: A Ticker class and a Date Mention class.&lt;/p&gt;

&lt;p&gt;A ticker has many date mentions and a date mention belongs to a ticker. Simple as that.&lt;/p&gt;

&lt;p&gt;With those definitions done, I could simply call a Ticker instance and retrieve all the corresponding data for a given date for a given ticker. The difficult part was designing the API to give useful information in JSON format, but even that was relatively straight-forward once it became clear what kind of data was required for the front end.&lt;/p&gt;

&lt;h3 id=&quot;graphing-market-data&quot;&gt;Graphing Market Data&lt;/h3&gt;

&lt;p&gt;In my &lt;a href=&quot;https://tracedelange.github.io/2021-07-28-sales-console&quot;&gt;Sales Console&lt;/a&gt; project, I utilized the react library &lt;a href=&quot;https://recharts.org/en-US/&quot;&gt;Recharts&lt;/a&gt; which allowed for quick and fully customizable graphing. Because I knew how easy it was to work with, I decided to go with recharts again for this project and it held up extremely well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/money-talks/front-end.png&quot; alt=&quot;Profile Page&quot; style=&quot;width:120vw;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I used a free finance API to call data for the last year on any given symbol entered and saved it to a master state. When the date range is changed, that data is reordered to fit the date range instead of a new back-end call occurring. This decreases load time and helps ease the rate limit requirements on the back end. The biaxial line chart was impressive, and it was a straight-forward process to customize the different aspects of the graph.&lt;/p&gt;

&lt;p&gt;If you’d like to visit the site, you can check it out &lt;a href=&quot;https://money-talks-front-end.herokuapp.com/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As of this posting, my Raspberry Pi is still working away keeping this information up to date. As for conclusions to be drawn from the data, it’s difficult to say. There are certain instances where it looks like correlations arise but it’s say if market changes cause people to talk or if people talking causes market changes to occur.&lt;/p&gt;

&lt;p&gt;I’ll leave it to the financial analysts to decide, I just had fun making the project.&lt;/p&gt;

&lt;p&gt;If you’d like to check out the code behind this project, you can find the GitHub repos for each corresponding part of the project &lt;a href=&quot;https://github.com/tracedelange/money-talks-sinatra&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like usual if you have any questions &lt;a href=&quot;mailto:tracedelange@me.com&quot;&gt;I’m more than happy to chat.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for stopping by!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Trace&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Trace DeLange</name></author><category term="coding" /><category term="projects" /><summary type="html">Welcome Back!</summary></entry><entry><title type="html">Building the Sales-Console</title><link href="http://localhost:4000/2021-07-28-sales-console" rel="alternate" type="text/html" title="Building the Sales-Console" /><published>2021-07-28T12:00:00-05:00</published><updated>2021-07-28T12:00:00-05:00</updated><id>http://localhost:4000/sales-console</id><content type="html" xml:base="http://localhost:4000/2021-07-28-sales-console">&lt;h1 id=&quot;welcome-back-folks&quot;&gt;Welcome back, folks&lt;/h1&gt;

&lt;p&gt;This post is meant to showcase a project that I recently wrapped up - A business analytics tool meant to display and glean insights from fictitious sales-reports generated in python. If you want to check out the README for the project, you can find it &lt;a href=&quot;https://github.com/tracedelange/sales-console#readme&quot;&gt;here&lt;/a&gt;. If you’d like to look at the demo for the site, you can check it out &lt;a href=&quot;https://sales-console-demo.herokuapp.com/customers&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The project boils down to three main components:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A python script which reads in data from two text files, takes a few parameters from the user, and spits out a JSON file containing a factitious company, CEO, customers, products, and one year worth of time-stamped product orders by each customer.&lt;/li&gt;
  &lt;li&gt;A JSON-server instance which reads in the JSON file created by the Python script and mimics a backend server.&lt;/li&gt;
  &lt;li&gt;A React App which calls the backend JSON-server and displays the data in insightful ways, containing statistics about specific product sales trends, customer order history, gross income, and other insights.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This project was meant to be an exercise in creating a tool. While all the data being produced might be fake, it isn’t hard to imagine plugging in some real data and gaining some new perspective. Some family members of mine run a small business and regularly receive sales-reports from distributers, all too often those sales-reports might pile up and gather dust because the energy required to set up the infrastructure to process and display the data is too great compared to all the other urgent tasks that constantly need attention when running a small business.&lt;/p&gt;

&lt;p&gt;Those dusty sales reports were my inspiration for this project - and I learned a ton.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;the-development-process&quot;&gt;The Development Process&lt;/h2&gt;

&lt;h3 id=&quot;site-design&quot;&gt;&lt;strong&gt;Site Design&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;When I sought out to create this project, I immediately went to google to look for inspiration. My idea was to create something simple, sleek, and useful. I’ve been experimenting a lot with &lt;a href=&quot;https://material-ui.com/&quot;&gt;Material-UI&lt;/a&gt; as a front-end design library because most of their stuff is free, good-looking, and with a little bit of head-banging, customizable.&lt;/p&gt;

&lt;p&gt;Looking through the Material-UI library, I stumbled upon their &lt;a href=&quot;https://material-ui.com/getting-started/templates/dashboard/&quot;&gt;Dashboard Template&lt;/a&gt;. I was a big fan and decided that one of my goals would be to successfully clone this layout. I skipped the download and decided to make my own design and try to match it closely to that template. The main aspects of the template I wanted to emulate was having a sidebar with links and a main console area that contains child components, one being a table containing data, and the other being a graph displaying that data. With this goal in mind, I set out.&lt;/p&gt;

&lt;p&gt;The layout was surprisingly easy to get working. It’s kind of reassuring to find out that after so long of failing to product CSS that I’m happy with, things are starting to work out how I imagine them. The first major roadblock I ran into came up after I managed to get my layout just how I wanted. I was ready to start adding a table to hold the data when I remembered - Ah yes, I have no data…&lt;/p&gt;

&lt;h3 id=&quot;generating-fake-data&quot;&gt;&lt;strong&gt;Generating fake Data&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;I studied science in college.&lt;/p&gt;

&lt;p&gt;You do not make up data in science.&lt;/p&gt;

&lt;p&gt;If you make up data in science, bad things can happen. A lesson that was beat into my mind in a dozen different classes by a dozen different teachers.&lt;/p&gt;

&lt;p&gt;I think this is the reason I enjoy making fake data so much. That and the fact that it’s often a great source of amusement.&lt;/p&gt;

&lt;p&gt;For this project I needed to generate a JSON file that contained four main types of data:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A list of customers containing their name and each order placed by that customer&lt;/li&gt;
  &lt;li&gt;A list of products containing the name of the product, its cost and the number of units sold&lt;/li&gt;
  &lt;li&gt;A list of dates organized by month that contain each product sold on each given date of the year&lt;/li&gt;
  &lt;li&gt;An object containing the name of the company as well as any extra information about the user to be displayed as a “Profile section”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The final format for the JSON file structure that I settled on looked like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;customers&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;customerName&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Example Name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;orderDate&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01/24/2021&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;productPurchased&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;productName&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Example Product&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;productCost&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;166&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;numberSold&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;427&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{...},&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{...}&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{...},&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{...},&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{...},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;productName&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Example Product 1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;productCost&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;numberSold&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{...},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{...},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{...}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
   &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dates&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01_2021&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01/01/21&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Product 1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Product 2&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Product 3&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
         &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01/02/21&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...],&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;DeLange Development&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;CEO&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Trace DeLange&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Master Engineer&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bio&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Engineering Solutions for Made-up Problems&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s a lot of JSON, but once I decided what I wanted the data to look like, it was easy to set up some Python functions to generate random products, customers, order dates and company name.&lt;/p&gt;

&lt;p&gt;Most of the data is being pulled from two text files that I repurposed from an old project. In the original project, I took a massive list of book titles from the &lt;a href=&quot;http://www2.informatik.uni-freiburg.de/~cziegler/BX/&quot;&gt;BookCrossing Dataset&lt;/a&gt; and split them into titles and authors. I then wrote some code to generate a phony book title based on (Markov Chains to make them sound convincing) and appended a random authors name from the list of two-hundred thousand author names. Finally, once this random book title was generated, I’d tweet it out on a schedule using a bot. This was one of my first software projects and it was ambitious for me at the time. I’m glad that I was able to refer to it and get some use out of some heavy lifting I did two years ago. The final product was underwhelming, and a lot of the titles generated were nonsense, but some were funny. I might revisit and revamp the project eventually.&lt;/p&gt;

&lt;p&gt;Anyways, with my list of nouns and authors in hand, it was a simple process of creating an object and populating it with my desired number of customers, products, and orders. After the object was created, I could simply export it as a JSON file, and the JSON-server could take it from there.&lt;/p&gt;

&lt;h3 id=&quot;graphing&quot;&gt;&lt;strong&gt;Graphing&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Now that I had data and a table, all that was left for the most part was to graph it. One of the lessons that we have been getting taught throughout my program, and in the development world in general, is that you shouldn’t waste your time reinventing the wheel. If I need graphs, it’s probably a better use of my time researching graphing libraries and reading some quick getting started docs than it is trying to build a graphing library from scratch. I took heed of this lesson when it came to this problem and quickly discovered the library &lt;a href=&quot;https://recharts.org/en-US/&quot;&gt;Recharts&lt;/a&gt;. I was very impressed with the ease of access and implementation associated with this library. Not only is it easy to plug your data in, but the component-based utility of the graphs makes it super easy to add, remove and customize each element of the graph. This library will be my first pic when graphing data in the future, especially considering I only scratched the surface for this project.&lt;/p&gt;

&lt;h3 id=&quot;so-how-does-it-look&quot;&gt;&lt;strong&gt;So how does it Look?&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;After getting the data imported into tables and the graphs working appropriately, I decided to do some editing to the styling and came up with these final layouts for the project.&lt;/p&gt;

&lt;p&gt;The console was split into four main sections: The profile page, the customer console, the product console, and the order console.&lt;/p&gt;

&lt;p&gt;The profile page featured the current user and a form which allows for customization of the name of the user, their title, the title of the company, and the company slogan or bio:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/sales-console-images/profile-page-form-filled.png&quot; alt=&quot;Profile Page&quot; style=&quot;width:130vw;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the edit-profile form is submitted, it sends a post to the json-server that persists the changes to the next session.&lt;/p&gt;

&lt;p&gt;The customer console really came together well, the main display features a bar graph containing each customer plotted against how many orders they’ve placed. All the customers are being displayed on the bottom with some additional information in tabular form:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/sales-console-images/customer-console.png&quot; alt=&quot;Profile Page&quot; style=&quot;width:130vw;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking on a customer in the table or on the graph brings up details about that customer and a specific graph featuring the sales history of the customer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/sales-console-images/customer-console-details.png&quot; alt=&quot;Profile Page&quot; style=&quot;width:130vw;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Always good to know who your friends are!&lt;/p&gt;

&lt;p&gt;The orders console displays each day of the year and the number of orders placed on each day:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/sales-console-images/order-console.png&quot; alt=&quot;Profile Page&quot; style=&quot;width:130vw;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the bottom of the page, you can select a product to filter by:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./assets/sales-console-images/order-console-details.png&quot; alt=&quot;Profile Page&quot; style=&quot;width:130vw;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I was happy with how the graphs fit into the website. I was able to customize the color of the lines to match the theme and if there was anything else that needed to be customized, I’m sure it could have been done.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;&lt;strong&gt;What’s next&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;I think that it would be exciting to continue building upon this project and getting it to a point where a real business might be able to utilize it for their gain, or even a point where I might be able to sell the product of an analytics console to a business, but this is more of a proof of concept and an exercise in design than anything marketable. If I were to continue this idea, I’d start working on a backend system to authorize specific users from specific organization and create a login system. That is something I am not ready at this point to take on; however, it is something that I am looking to experiment with soon. Other interesting avenues to explore would be to analyze the specific purchase history of each customer and try to predict what their next purchase will be. Considering all this data is random, there wouldn’t be a lot to do with analytics on this level - If I were to plug some real data in though, it would be exciting to see what kind of market insights could be gained.&lt;/p&gt;

&lt;p&gt;As of now, I think I am going to let this project rest for some time. I’m starting to see sales-data in my dreams and there are some other topics that I’d like to explore.&lt;/p&gt;

&lt;p&gt;As always, thank you very much for taking the time to read. If you want to check this project out on GitHub, you can find the repo &lt;a href=&quot;https://github.com/tracedelange/sales-console&quot;&gt;here&lt;/a&gt; and if you want to check out the live demo, you can find it &lt;a href=&quot;https://sales-console-demo.herokuapp.com/customers&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any comments, questions or just want to chat, you can reach me at tracedelange@me.com&lt;/p&gt;

&lt;p&gt;Thanks for reading!
&lt;strong&gt;&lt;em&gt;Trace&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Trace DeLange</name></author><category term="coding" /><category term="sales-console" /><category term="projects" /><summary type="html">Welcome back, folks</summary></entry><entry><title type="html">Building the Digital Tidepool</title><link href="http://localhost:4000/2021-06-30-digital-tidepool" rel="alternate" type="text/html" title="Building the Digital Tidepool" /><published>2021-06-30T12:00:00-05:00</published><updated>2021-06-30T12:00:00-05:00</updated><id>http://localhost:4000/digital-tidepool</id><content type="html" xml:base="http://localhost:4000/2021-06-30-digital-tidepool">&lt;h1 id=&quot;howdy-folks&quot;&gt;Howdy Folks!&lt;/h1&gt;

&lt;p&gt;In this post I am going to walk you through some of the more technical problems I ran into and the overall developmental process behind my project titled “The Digital Tidepool”.&lt;/p&gt;

&lt;p&gt;If you haven’t yet visited the tidepool, you should mess around for a bit &lt;a href=&quot;https://tracedelange.github.io/digital-tidepool/&quot;&gt;here&lt;/a&gt;. Additionally, if you’re interested in diving into the code, the finished project can be found on my &lt;a href=&quot;https://github.com/tracedelange/&quot;&gt;github page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-first-attempt&quot;&gt;The First Attempt&lt;/h2&gt;

&lt;p&gt;In truth, this is the third time I’ve tried to create the digital tidepool. My first attempt was a huge success for me at the time but looking back I can see many poor design decisions that I made. It was written entirely in python using the PyGame library which allows for some interesting game development / GUI interactivity. As far as a tool goes, it was far out of my range when I first attempted to create the tidepool.&lt;/p&gt;

&lt;p&gt;My first goal was to model the Game of Life, which I was able to do in surprisingly short time given how much documentation and clones there are out there. It was only after this that I decided to add some additional characters and see where things ended up. At the time, I had just finished my last term of college a semester early. I was in the process of job hunting and even had some promising leads until Covid hit. For a couple weeks the only thing I had to keep busy was annoying my girlfriend and stare at little green squares.&lt;/p&gt;

&lt;p&gt;In college I studied Biology. It’s no surprise then, that natural systems would find their way into my code. In fact, modelling natural systems is one of the things that interests me most in software. As such, with four years of cellular, ecological, and evolutionary coursework beat into my mind, I decided to reformat some of that information into code.&lt;/p&gt;

&lt;p&gt;This was the result of my first honest attempt:&lt;/p&gt;

&lt;iframe src=&quot;https://www.youtube.com/embed/sDO5RWVB3wk&quot; width=&quot;800&quot; height=&quot;400&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Basically, what’s happening above is the same as what is happening in the current version. There are green elements which grow and creep across the grid like a mold or algae. These act as the foundation of the ecosystem and are the prey to the blue “eaters” which seek out and feed on the greens. The red element is a predator or a secondary consumer which seeks out the blue eaters and consumes them when possible.&lt;/p&gt;

&lt;p&gt;There were a few things that I did right here, and a lot that I did wrong. I suppose the journey of a developer is to recognize the “right” and the “wrong” of past projects, right?&lt;/p&gt;

&lt;p&gt;The single most redeeming feature of this iteration was the graph displaying the population sizes of each element. This is something I would really like to incorporate into the current version of the tidepool in the future. The population graphs between predator and prey ended up closely matching real life data collected from wildlife surveys.&lt;/p&gt;

&lt;p&gt;The largest drawback to me at the time was the lack of accessibility. Building something is great, but if I’m not able to allow laymen to access and interact with the project themselves, it feels a bit like wasted energy. The best I could think of doing at the time was taking a couple demo videos and sending them to close friends.&lt;/p&gt;

&lt;p&gt;As for most of the other features of the project… there was room for improvement.&lt;/p&gt;

&lt;p&gt;But time goes on, college purgatory ends, and projects get archived.&lt;/p&gt;

&lt;h2 id=&quot;lets-try-that-again&quot;&gt;Let’s try that again…&lt;/h2&gt;

&lt;p&gt;I didn’t resume work on the tidepool until about a year later. I decided to re-write the entire project in JavaScript and host it using a Heroku based Flask app. This attempt was… not quite as successful as my first attempt. The best result I could manage was a small canvas with a basic rendering of green producers and blue consumers along with some rudimentary stats on the side. The biggest roadblock I was running into was performance issues. Regardless of initial parameters, around 500 timesteps into the simulation a great deal of lag would appear, and the framerate of the simulation would plummet. Additionally, I had no concept of DOM manipulation and I had it in my mind that any processing had to take place behind the scenes, which involved communication between the JavaScript front end to the Python backend. I ran into more and more roadblocks throughout the course of the project and eventually the attempt was abandoned.&lt;/p&gt;

&lt;p&gt;This time, the single redeeming fact of the project was the accessibility. Anybody with the URL could dive in and experience the project firsthand. This was a huge part of the project that I wanted to &lt;em&gt;work&lt;/em&gt;. Unfortunately, my skills in HTML, CSS and JavaScript were woefully underdeveloped and the project requirements quickly outgrew my own knowledge base. I couldn’t continue because I couldn’t determine &lt;em&gt;what I did not know&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;While my code for the second iteration was technically written in JavaScript, it was fully pythonic in its implementation and was built entirely against the grain of JavaScript best practices, which likely attributed to the poor performance of the simulation. And yet, while it might have been a failed attempt, I learned a ton about how JavaScript works, and it acted as a powerful primer for this third iteration.&lt;/p&gt;

&lt;h2 id=&quot;third-times-the-charm&quot;&gt;Third times the charm!&lt;/h2&gt;

&lt;p&gt;I began working on this iteration of the digital tidepool about two weeks prior to me writing this. It’s incredible what you can get done when you decide to leave your job working as a lab-rat and commit fully to writing software eight plus hours a day!&lt;/p&gt;

&lt;p&gt;Not only is this project the third iteration of an old idea, but it is my submission for my first major portfolio project for my Software Engineering course.&lt;/p&gt;

&lt;p&gt;There are many things that set this iteration apart from others. For starters, this project is written entirely with native HTML, CSS, and JavaScript, all coded by hand. The only external package utilized was the PIXI library, which is used for editing and interacting with canvas objects and allows for pretty powerful sprite management.&lt;/p&gt;

&lt;h3 id=&quot;lists-of-lists-of-lists&quot;&gt;Lists of lists of lists&lt;/h3&gt;

&lt;p&gt;Each time I attempted this project, I had to create a model of the grid. My go to strategy for representing a two-dimensional grid has been to contain a nested list of lists. Nesting lists three levels deep allowed for very easy indexing across the x and y axes, and each x/y pair would return a list corresponding to that index on the board. I would use the indices of the deepest list to represent elements on the board. The first index of the list would identify the space as empty, green, eater or hunter. The subsequent indices would represent age, number of prey eater or any other properties of the element that needed persistence. For example, calling the index of the grid might have returned something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; [0,0,0]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Grid space is empty. &lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; [1,34,0]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Grid space is occupied by a green that has existed for 34 steps and has consumed zero elements.&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; [2,60,37]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Grid space is occupied by an eater that has existed for 60 timesteps and consumed 37 greens.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This was my go-to strategy for representing the game board across all three of my iterations. It made things easy to crunch because each tick of the game board I would simply iterate over the entire game board and carry out actions based on the identity of each space returned by the first index. For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// Grid index is empty, carry out &lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// functions for empty grid space&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// Grid index has an ID value of 1, meaning in my case,&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// the grid space is occupied by a green element.&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// Grid index has an ID value of 2, meaning in our case,&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// the grid space is occupied by a green consumer element.&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While this strategy worked, there was certainly room for improvement in terms of efficiency. I’m not an expert on Big O notation but I do know that nested loops are to be avoided when possible.&lt;/p&gt;

&lt;h3 id=&quot;objectively-better-code&quot;&gt;Objectively Better Code&lt;/h3&gt;

&lt;p&gt;To break out of this routine of nested looping, I decided to take the plunge into refactoring my project into a class-based system. There were tons of advantages to taking this approach and I’m very glad I decided to take the time to make it work.&lt;/p&gt;

&lt;p&gt;Essentially what I did was offload each element type into their own class system. That way, each time a new element is created, regardless of if it’s a green, an eater or a hunter, the constructor function inside the class immediately appends the new element to a master list of elements in that class.&lt;/p&gt;

&lt;p&gt;This change of speed had the advantage of allowing me to iterate over lists of elements, rather than iterating over the entire board and acting conditionally based on what the identity of the grid space was discovered to be.&lt;/p&gt;

&lt;p&gt;To be able to iterate over a known list of hunter elements and allow them to each calculate their next move, then do the same with each other element, was a much cleaner and simpler way to handle things. It even had the added benefit of allowing me to remove properties from the grid list as all relevant properties of an element would be contained within its object properties. One such property referred to its index and therefor placement on the board.&lt;/p&gt;

&lt;p&gt;All in all, this change of tactics was a huge step forward and greatly improved both the speed of the simulation but also the readability of the underlying code.&lt;/p&gt;

&lt;h3 id=&quot;persistence&quot;&gt;Persistence&lt;/h3&gt;

&lt;p&gt;Another big roadblock that I ran into was the issue of persistence between simulations.&lt;/p&gt;

&lt;p&gt;My go to method for resetting the simulation is to simply reload the page and start fresh. This was the simplest and cleanest solution, the only downside being that all changes made by the user in the previous session would be lost - all values would be returned to default and any changes the user made would have to be repeated. I wanted the tidepool to be something that users can interact with and experiment with change, so I decided that it was essential to have continuity between sessions. The issue was that I had no solid idea on how to persist data between reloads of the page.&lt;/p&gt;

&lt;p&gt;I landed on two solid ways to solve this problem:&lt;/p&gt;

&lt;p&gt;The first involves downloading and installing the node package “JSON-Server” which is a lightweight program that allows a user to create a local database in JSON format that can be called from your local machine using fetch. This worked very well for my purposes as I was able to make a POST request containing all the parameters the user has customized, save all the relevant information in the database, reload the front end, make a GET request back to the database, and finally override the default parameters with the configuration persisted from the last simulation.&lt;/p&gt;

&lt;p&gt;I liked this method because it allows for long term storage of configurations as well as the users personal record of longest held balance in the tidepool. I also didn’t like this method because it dug into my desire for accessibility. I don’t expect the average user to navigate to my github account, clone my project, install npm, install a dependency they have never heard of, run a JSON server and finally get to experience my project. I feel as though by minimizing the number of steps associated with accessing my work, the more engaged users will be. This led me to my second solution.&lt;/p&gt;

&lt;p&gt;My second solution to this problem was the humble cookie. I always vaguely knew what cookies were, but I had never experimented with them until this project. Cookies, as defined by &lt;a href=&quot;https://techterms.com/definition/cookie&quot;&gt;Tech Terms&lt;/a&gt;, are:
“a small amount of data generated by a website and saved by your web browser. Its purpose is to remember information about you, similar to a preference file created by a software application.”&lt;/p&gt;

&lt;p&gt;In my case, the small piece of data that my project generates are a stringified JSON object containing the current configuration of user parameters. This cookie gets saved right before the page is reloaded, and once the reload is completed, the cookie is accessed and the configurations are populated with the values from the last session, seamlessly.&lt;/p&gt;

&lt;p&gt;Overall, I am very pleased with the ease of access and the continuity that cookies have allowed me in this project. They are a powerful tool and I feel as though I’ve only scratched the surface of their usage. This approach allows for simple short-term experimentation in the tidepool. Once the browser is closed, the configurations will be lost, so the persistence is not quite as extensive as with utilizing the JSON server, but for the average user it is perfect.&lt;/p&gt;

&lt;h2 id=&quot;to-conclude&quot;&gt;To Conclude…&lt;/h2&gt;

&lt;p&gt;The digital tidepool is an idea I’ve had for a long time, and it has been a cathartic experience to finally feel as though I’ve done it &lt;em&gt;right&lt;/em&gt;. There are dozens of other issues and roadblocks that I ran into during the production of this third iteration, but I think that I will leave it here and allow you to jump in. I can’t say with much confidence that this will be my last time building the tidepool. I think that this idea has a lot to offer in terms of exploration. At the end of the day however, I am not quite set on being a game developer. The sprite art conceived in this project would be put to shame by any who tried. But still, they are mine and I am proud of this project. I hope you’ve enjoyed reading and I hope you can take something away from this and plug it into your own work. I’m still not awesome at this blogging exercise so if anybody has some pointers, tips, or tricks, shoot me an email. That goes for questions about the project too!&lt;/p&gt;

&lt;p&gt;Thanks for reading,&lt;/p&gt;

&lt;p&gt;Trace&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post_images/eater-lovey.png&quot; alt=&quot;Lovey Eater&quot; /&gt;&lt;/p&gt;</content><author><name>Trace DeLange</name></author><category term="coding" /><category term="digital-tidepool" /><category term="projects" /><summary type="html">Howdy Folks!</summary></entry><entry><title type="html">So… why software?</title><link href="http://localhost:4000/2021-06-10-why-software" rel="alternate" type="text/html" title="So… why software?" /><published>2021-06-10T12:00:00-05:00</published><updated>2021-06-10T12:00:00-05:00</updated><id>http://localhost:4000/why-software</id><content type="html" xml:base="http://localhost:4000/2021-06-10-why-software">&lt;h1 id=&quot;because-its-fun-of-course&quot;&gt;Because it’s fun of course!&lt;/h1&gt;

&lt;p&gt;That’s the short answer.&lt;/p&gt;

&lt;p&gt;If you want the long story…&lt;/p&gt;

&lt;p&gt;I’ve always been fascinated by science. Naturally, when it came time to decide what kind of course material I wanted to study at school, I chose to study Biology. This decision was in large to get the opportunity to dive headfirst into the natural world at its most fundamental level, as well as to avoid over specialization and remain as flexible as possible.&lt;/p&gt;

&lt;p&gt;The course work was incredibly engaging - but I knew that by staying in the strict aisle of Biology, my post-grad options would be highly suggestive towards medical school or some other form of graduate school. Neither of those options sounded intriguing to me, so I spent a lot of time determining how I would leverage all the conceptual knowledge I had gained at school. In my final term of school before graduation, I enrolled in an upper-level class entitled “Programming in Biology”. This was probably one of the most engaging classes I had experienced in my schooling, and if I could change one thing looking back, it would have been to enroll in a computer science course earlier in my college experience. Suddenly I had an opportunity to develop some marketable and in-demand hard skills, and I leapt at the chance.&lt;/p&gt;

&lt;p&gt;Alas, as things go, I discovered my love for programming in the final term of my college career. The course was entirely based around scientific data processing and analyzing techniques in Python. Before enrolling in this course, I had always had some predispositions to software, that I wouldn’t be successful, or I had already waited too long to develop those kind of skills. To my pleasant surprise, I found the coursework &lt;i&gt;fun&lt;/i&gt;, in fact, I wanted &lt;i&gt;more homework&lt;/i&gt;. Now, I absolutely believe that educating yourself is one of the greatest opportunities we are given as human beings, and homework is a part of that equation, but historically I am not the one to ask for &lt;i&gt;&lt;b&gt;more homework.&lt;/b&gt;&lt;/i&gt; But I was having more fun than I ever could have possibly expected!&lt;/p&gt;

&lt;p&gt;I have three older brothers. Growing up, it was a loud and busy house. We had a lot of fun, and we broke a lot of lamps (among other things). My parents did a fantastic job raising my brothers and I, and they deserve all the credit in the world for the work they invested in us. That being said, they did not raise artists. My parents taught me how to do a lot of things but playing a soothing melody or painting a beautiful mountain scene were not one of those things.&lt;/p&gt;

&lt;p&gt;In my senior year of college, I discovered that I might just have found something that I had been missing up to that point - a creative outlet. Suddenly there were all these different possibilities that opened to me. This entire new field of knowledge that allows for so much potential to &lt;i&gt;create&lt;/i&gt;. Something I had never felt like I could do before.&lt;/p&gt;

&lt;p&gt;Needless to say, I was, and still am, hooked. When I ask myself “Why do I want to be a Software Engineer?” The answer is simple. It feels good to create things that I am proud of. If I can do that and make a living at the same time - what’s there to lose?&lt;/p&gt;</content><author><name>Trace DeLange</name></author><category term="update" /><summary type="html">Because it’s fun of course!</summary></entry><entry><title type="html">Welcome to the blog, folks</title><link href="http://localhost:4000/2021-06-09-welcome-to-the-blog" rel="alternate" type="text/html" title="Welcome to the blog, folks" /><published>2021-06-09T12:00:00-05:00</published><updated>2021-06-09T12:00:00-05:00</updated><id>http://localhost:4000/welcome-to-the-blog</id><content type="html" xml:base="http://localhost:4000/2021-06-09-welcome-to-the-blog">&lt;h1&gt; Welcome, welcome, welcome &lt;/h1&gt;

&lt;p&gt;It took a little longer than anticipated, but I am happy to say that I’ve finally committed to building a career in software.&lt;/p&gt;

&lt;p&gt;In order to pursue this goal, I have enrolled in the full-time Software Engineering course offered by &lt;a href=&quot;https://www.coursereport.com/schools/flatiron-school#reviews&quot;&gt;Flatiron School&lt;/a&gt;.
One of the first things required of students is to create a blog to help document and showcase your work throughout the program and beyond.&lt;/p&gt;

&lt;p&gt;While I do have some experience with software, the majority involved data processing in Python, I am under no illusion that this career transition will be any kind of walk in the park - but hey, a smooth sea never made a skilled sailor, right?&lt;/p&gt;

&lt;p&gt;For a long while I’ve been spared the daunting task of navigating the jungle that is JavaScript, CSS and HTML, except for on the barest peripheries. My coding existence composed of pure little Jupyter Lab notebook filled with pandas tables and matplotlib graphs.&lt;/p&gt;

&lt;p&gt;Alas, all things must come to an end - if I am serious about making a career out of software it’s well past my time to wade into the water and get my feet wet.&lt;/p&gt;

&lt;p&gt;Thankfully for me, though, I have a blog! A blog which will allow me to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Provide an informational and referenceable narrative about the developmental processes behind my work&lt;/li&gt;
&lt;li&gt;Demonstrate my knowledge and proof of knowledge to fellow developers, colleagues and potential employers&lt;/li&gt;
&lt;li&gt;Let my inevitable frustration out in a productive and controlled way!&lt;/li&gt;
&lt;li&gt;(Hopefully!) Provide some inspiration for someone out there exploring some cool idea.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If I can do it, anybody can. Let’s get to work.&lt;/p&gt;</content><author><name>Trace DeLange</name></author><category term="announcement" /><summary type="html">Welcome, welcome, welcome</summary></entry></feed>